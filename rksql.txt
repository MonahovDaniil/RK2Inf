CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR NOT NULL,
    quantity INTEGER NOT NULL
);

CREATE TABLE operations_log (
    id SERIAL PRIMARY KEY,
    product_id INTEGER REFERENCES products(id),
    operation VARCHAR CHECK (operation IN ('ADD', 'REMOVE')),
    quantity INTEGER NOT NULL,
    operation_time TIMESTAMP
);
CREATE OR REPLACE PROCEDURE update_stock(
    product_id INT,
    operation VARCHAR,
    quantity INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    IF operation = 'ADD' THEN
        UPDATE products
        SET quantity = quantity + quantity
        WHERE id = product_id;
        
    ELSIF operation = 'REMOVE' THEN
        IF (SELECT quantity FROM products WHERE id = product_id) >= quantity THEN
            UPDATE products
            SET quantity = quantity - quantity
            WHERE id = product_id;
        ELSE
            RAISE EXCEPTION 'Недостаточно товара на складе для удаления';
        END IF;
    ELSE
        RAISE EXCEPTION 'Недопустимая операция: %', operation;
    END IF;
    
    INSERT INTO operations_log(product_id, operation, quantity)
    VALUES (product_id, operation, quantity);
END;
$$;

CREATE OR REPLACE FUNCTION log_operations() 
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'UPDATE' THEN
        IF NEW.quantity <> OLD.quantity THEN
            INSERT INTO operations_log (product_id, operation, quantity)
            VALUES (NEW.id, 'UPDATE', NEW.quantity - OLD.quantity);
        END IF;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_log_operations
AFTER UPDATE ON products
FOR EACH ROW EXECUTE FUNCTION log_operations();